name: Create release

on:
  push:
    tags:
      - 'v*'

jobs:

  build_releases:
    name: Build binary - ${{ matrix.binary_os_suffix }}-${{ matrix.binary_arch_suffix }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VERSION: ${{ github.ref_name }}
      MESSAGE: "WIP"
      FILENAME: hetzner-k3s-${{ matrix.binary_os_suffix }}-${{ matrix.binary_arch_suffix }}

    strategy:
      matrix:
        include:
          - runs_on_tag: macos-13
            binary_os_suffix: macos
            binary_arch_suffix: amd64
          - runs_on_tag: macos-14
            binary_os_suffix: macos
            binary_arch_suffix: arm64
            architecture: arm
          - runs_on_tag: ubuntu-24.04
            binary_os_suffix: linux
            binary_arch_suffix: arm64
            arch: aarch64
            # distro: alpine_latest
          - runs_on_tag: ubuntu-24.04
            binary_os_suffix: linux
            binary_arch_suffix: amd64
            arch: none
            # distro: none
            # base_image: amd64/alpine

    runs-on: ${{ matrix.runs_on_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          set-safe-directory: '/home/runner/work/hetzner-k3s/hetzner-k3s'

      - uses: crystal-lang/install-crystal@v1
        with:
          crystal: 1.14.1

      - if: matrix.binary_os_suffix == 'macos'
        name: macos build step
        run: |
          brew install openssl@3
          brew unlink openssl@1.1 || true
          brew link --force --overwrite openssl@3

          export PATH="/usr/local/opt/openssl@3/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/openssl@3/lib"
          export CPPFLAGS="-I/usr/local/opt/openssl@3/include"
          export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig"

          shards install --without-development
          crystal build src/hetzner-k3s.cr --release
          chmod +x hetzner-k3s
          cp hetzner-k3s ${{ env.FILENAME }}

      # - if: matrix.binary_os_suffix == 'linux'
      #   # uses: uraimo/run-on-arch-action@v2
      #   name: linux build step
      #   with:
      #     arch: ${{ matrix.arch }}
      #     distro: ${{ matrix.distro }}
      #     # base_image:  ${{ matrix.base_image }}

      #     shell: /bin/sh

      #     install: |
      #       apk update
      #       apk add --update --no-cache gcc gmp-dev libevent-dev musl-dev pcre-dev pcre2-dev libxml2-dev \
      #         openssl-dev tzdata yaml-dev zlib-dev xz-dev \
      #         make git autoconf automake libtool patch libssh2-dev crystal shards gc-dev

      #     run: |
      #       shards install --without-development

      #       # Build without full static linking - this creates a binary that only depends on common system libs
      #       crystal build src/hetzner-k3s.cr --release \
      #         --link-flags="-static-libgcc -static-libstdc++"

      #       # Check dependencies (for debugging)
      #       ldd hetzner-k3s || true

      #       cp hetzner-k3s ${{ env.FILENAME }}


      - if: matrix.binary_os_suffix == 'linux'
        name: linux build step
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libxml2-dev libgmp-dev \
            libyaml-dev libpcre3-dev libevent-dev

          shards install --without-development
          crystal build src/hetzner-k3s.cr --release \
            --link-flags="-static-libgcc -static-libstdc++"
          cp hetzner-k3s ${{ env.FILENAME }}

      - name: Publish new version
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ env.GITHUB_TOKEN }}
          file: ${{ env.FILENAME }}
          tag: ${{ env.VERSION }}
          overwrite: true
          body: ${{ env.MESSAGE }}
